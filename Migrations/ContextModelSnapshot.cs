// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintLayer.Data;

namespace PrintLayer.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PrintLayer.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PrintLayer.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44b05f8a-fb35-4b64-b0d3-850cdc07e76a"),
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 298, DateTimeKind.Utc).AddTicks(6446),
                            Description = "This is a test news description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 1"
                        },
                        new
                        {
                            Id = new Guid("7031be1f-8c8c-4ec7-98c8-ae24d7eeced6"),
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 298, DateTimeKind.Utc).AddTicks(7079),
                            Description = "This is a test news description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 2"
                        },
                        new
                        {
                            Id = new Guid("b1f2931b-e49a-440e-8ee6-9dcccb854694"),
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 298, DateTimeKind.Utc).AddTicks(7127),
                            Description = "This is a test news description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 3"
                        },
                        new
                        {
                            Id = new Guid("8fc8a257-1c57-442c-bb2a-901a03b87ced"),
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 298, DateTimeKind.Utc).AddTicks(7148),
                            Description = "This is a test news description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Name 4"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3403ad77-2007-4184-a243-64e37e607f31"),
                            Address = "Moscow Kremlin st 0",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(7873),
                            Description = "Sample Description 0",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("0a55d8c5-10bf-4b46-8f49-bedd9dbdcbb2"),
                            Address = "Moscow Kremlin st 1",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9387),
                            Description = "Sample Description 1",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("2c02bc4b-926e-4bba-b678-7da6dca364ed"),
                            Address = "Moscow Kremlin st 2",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9467),
                            Description = "Sample Description 2",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("2041a8aa-142d-4137-abe5-55e44ce524e6"),
                            Address = "Moscow Kremlin st 3",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9493),
                            Description = "Sample Description 3",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("0b73eda5-2ad4-4776-8679-e1bfeafe0ad0"),
                            Address = "Moscow Kremlin st 4",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9515),
                            Description = "Sample Description 4",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("f66cfac0-a224-4fe9-9939-59652763af3e"),
                            Address = "Moscow Kremlin st 5",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9543),
                            Description = "Sample Description 5",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("06c7d58a-cfc2-4d67-9281-7f2467e519d7"),
                            Address = "Moscow Kremlin st 6",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9564),
                            Description = "Sample Description 6",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("25d5f17c-da3d-4e58-80cc-91b7ec201a8b"),
                            Address = "Moscow Kremlin st 7",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9585),
                            Description = "Sample Description 7",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("68276b69-ff68-4687-a8a0-39b174b038de"),
                            Address = "Moscow Kremlin st 8",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9605),
                            Description = "Sample Description 8",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("c51bdb56-5433-4680-82f5-18a5a0c3a253"),
                            Address = "Moscow Kremlin st 9",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9662),
                            Description = "Sample Description 9",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("59de5e72-c199-4fe1-8192-1516b7382ae1"),
                            Address = "Moscow Kremlin st 10",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9686),
                            Description = "Sample Description 10",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("1d55de0a-4ab0-42f4-bd2a-a697833b0a07"),
                            Address = "Moscow Kremlin st 11",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9707),
                            Description = "Sample Description 11",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("6e30abe9-3e84-4a74-b012-3d02e10379c1"),
                            Address = "Moscow Kremlin st 12",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9727),
                            Description = "Sample Description 12",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("abc02c44-a54d-410b-992a-163d957f9641"),
                            Address = "Moscow Kremlin st 13",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9749),
                            Description = "Sample Description 13",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("df31e67b-8745-4a94-9015-c639724d2d5d"),
                            Address = "Moscow Kremlin st 14",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9769),
                            Description = "Sample Description 14",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("1ed56b1d-2ec5-4763-8736-cb0debeecd9b"),
                            Address = "Moscow Kremlin st 15",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9789),
                            Description = "Sample Description 15",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("9f5abb79-8ac1-4416-83d1-08385df87b52"),
                            Address = "Moscow Kremlin st 16",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9809),
                            Description = "Sample Description 16",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("23fa048c-cb12-497f-bd75-3d62c4563801"),
                            Address = "Moscow Kremlin st 17",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9831),
                            Description = "Sample Description 17",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("f45e3161-b8d4-462a-a929-126b8c62e7c6"),
                            Address = "Moscow Kremlin st 18",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9851),
                            Description = "Sample Description 18",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        },
                        new
                        {
                            Id = new Guid("a104d94e-f760-44c5-966e-bf26fc3c44ce"),
                            Address = "Moscow Kremlin st 19",
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 297, DateTimeKind.Utc).AddTicks(9871),
                            Description = "Sample Description 19",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Phone = "+71234567890",
                            Status = 1,
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97418bb2-1365-4de4-ad55-2ca40e0fbc36"),
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 298, DateTimeKind.Utc).AddTicks(2445),
                            Description = "Sample review Description 1",
                            Grade = (byte)1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("aa4e55ac-bd36-45f1-acea-8da13292bccf"),
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 298, DateTimeKind.Utc).AddTicks(3652),
                            Description = "Sample review Description 2",
                            Grade = (byte)2,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("69877762-9942-464e-a1eb-6e6b7123c8eb"),
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 298, DateTimeKind.Utc).AddTicks(3769),
                            Description = "Sample review Description 3",
                            Grade = (byte)3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92",
                            UserName = "Admin Admin"
                        },
                        new
                        {
                            Id = new Guid("3ed3eab0-819e-42fd-b11a-b8d6721a5f9d"),
                            CreatedDate = new DateTime(2022, 3, 5, 13, 51, 31, 298, DateTimeKind.Utc).AddTicks(3795),
                            Description = "Sample review Description 4",
                            Grade = (byte)4,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = "77b6d946-a38c-44d7-8043-b365c65bcc92",
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "77b6d946-a38c-44d7-8043-b365c65bcc92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f70c9109-9130-4a5b-822f-0fa261d27558",
                            Email = "admin",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "a322b9c0b8e19ef16d4d308cd4e1222106d0edf8fbb3c8f1649242dff54a740c",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e32447ab-73f3-4f03-bd01-b89837c89366",
                            TwoFactorEnabled = false,
                            UserName = "Admin Admin"
                        });
                });

            modelBuilder.Entity("PrintLayer.Models.VotePrint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("VotePrints");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrintLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrintLayer.Models.Order", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrintLayer.Models.Review", b =>
                {
                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrintLayer.Models.VotePrint", b =>
                {
                    b.HasOne("PrintLayer.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
